services:
  db:
    image: mysql:5.6
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./db_data:/var/lib/mysql
      - ./mysql/init-mysql:/docker-entrypoint-initdb.d:ro
      - ./mysql/mysql_always_init:/always-initdb.d:ro
      - ./mysql/mysql-entrypoint.sh:/custom-entrypoint.sh:ro
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u $$MYSQL_USER --password=$$MYSQL_PASSWORD
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 55
    entrypoint: /custom-entrypoint.sh
    command: ["mysqld"]
    ports:
      - "3306"
    networks:
      - wordpress_nextjs_network_app

  wordpress:
    build:
      context: ./wordpress-api
      dockerfile: Dockerfile
    container_name: wordpress_app
    ports:
      - "8000:80"
    environment:
      WORDPRESS_DB_HOST: db:3306
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: wordpress
      WORDPRESS_DB_NAME: wordpress
      JWT_AUTH_SECRET_KEY: "test_secret_key"
    depends_on:
      - db
    networks:
      - wordpress_nextjs_network_app

  nextjs:
    build:
      context: .
      dockerfile: Dockerfile.next
    container_name: nextjs_app
    ports:
      - "3000:3000"
    depends_on:
      - wordpress
      - laravel
    networks:
      - wordpress_nextjs_network_app

  laravel:
    build:
      context: ./laravel-api
      dockerfile: Dockerfile
    container_name: laravel_app
    ports:
      - "8001:8000"  # Mapeando a porta 8000 do container para a 8001 do host
    volumes:
      - ./laravel-api:/var/www/html
    environment:
      DB_HOST: db
      DB_DATABASE: laravel
      DB_USERNAME: laravel
      DB_PASSWORD: laravel
      WP_API_BASE_URL: http://wordpress_app/wp-json/wp/v2
      WP_API_JWT_TOKEN: "test_secret_key"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - wordpress_nextjs_network_app


networks:
  wordpress_nextjs_network_app:
    driver: bridge
